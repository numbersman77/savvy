[
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "SAVVY: estimation of AE probabilities",
    "section": "",
    "text": "The assessment of safety is an important aspect of the evaluation of new therapies in clinical trials, with analyses of adverse events being an essential part of this. Standard methods for the analysis of adverse events such as the incidence proportion, i.e. the number of patients with a specific adverse event out of all patients in the treatment groups, do not account for both varying follow-up times and competing risks. Alternative approaches such as the Aalen-Johansen estimator of the cumulative incidence function have been suggested. Theoretical arguments and numerical evaluations support the application of these more advanced methodology, but as yet there is to our knowledge only insufficient empirical evidence whether these methods would lead to different conclusions in safety evaluations. The Survival analysis for AdVerse events with VarYing follow-up times (SAVVY) project strives to close this gap in evidence by conducting a meta-analytical study to assess the impact of the methodology on the conclusion of the safety assessment empirically. Three papers are currently under review summarizing the rationale and results of the project:\n\nStegherr, Beyersmann, et al. (2021): statistical analysis plan, presenting the rationale and statistical concept of the empirical study conducted as part of the SAVVY project. The statistical methods are presented in unified notation and examples of their implementation in R and SAS are provided.\nStegherr, Schmoor, Beyersmann, et al. (2021): 1-sample case, compares estimators of AE probabilities in one treatment arm,\nRufibach et al. (2022): 2-sample case, compares relative risk estimators comparing two treatment arms based on (1) AE probabilities and (2) hazards."
  },
  {
    "objectID": "code.html#packages",
    "href": "code.html#packages",
    "title": "SAVVY: estimation of AE probabilities",
    "section": "Packages",
    "text": "Packages\n\n# --------------------------------------------------------------\n# packages\n# --------------------------------------------------------------\npacks <- c(\"data.table\", \"etm\", \"survival\", \"mvna\", \"knitr\")    \nfor (i in 1:length(packs)){library(packs[i], character.only = TRUE)}"
  },
  {
    "objectID": "code.html#functions",
    "href": "code.html#functions",
    "title": "SAVVY: estimation of AE probabilities",
    "section": "Functions",
    "text": "Functions\nBelow all functions are defined.\n\ndata_generation_constant_cens: This function generates the dataset denoted by \\(S1\\) in Table~4 of Stegherr, Schmoor, Lübbert, et al. (2021), i.e. we assume constant hazards for the AE hazard, the hazard for the competing event of death, and the hazard for the “soft” competing events. Censoring is uniform.\nincidenceProportion: Compute incidence proportion.\nprobTransIncidenceDensity: Compute probability transform incidence density ignoring competing events.\nprobTransIncidenceDensity: Compute probability transform incidence density ignoring competing events.\noneMinusKaplanMeier: Compute 1 - Kaplan-Meier estimator.\nAJE: Compute Aalen-Johansen estimator.\n\nThe argument CE codifies the type of competing event: CE = 2 refers to a competing event of death only whereas CE = 3 refers to all competing events.\n\n# --------------------------------------------------------------\n# functions\n# --------------------------------------------------------------\n\n# function to generate dataset with constant hazards for AE, death, and soft competing events\ndata_generation_constant_cens <- function(N, min.cens, max.cens, haz.AE, haz.death,\n                                          haz.soft, seed = 57 * i + 5){\n  \n  # status, 1 for AE, 2 for death 3 for soft competing event\n  set.seed(seed)\n  haz.all <- haz.AE + haz.death + haz.soft\n\n  my.data <- data.table(time_to_event = rep(0, N), type_of_event = rep(0, N))\n  my.data$time_to_event<- rexp(n = N, rate = haz.all) # event time\n  my.data$type_of_event <- rbinom(n = N, size = 2, \n                                  prob = c(haz.AE / haz.all, haz.death / haz.all, haz.soft / haz.all)) + 1\n                                  # status, 1 for AE, 2 for death 3 for soft competing event\n  my.data$cens <- runif(n = N, min = min.cens, max = max.cens)\n  my.data$type_of_event <- as.numeric(my.data$time_to_event <= my.data$cens) * my.data$type_of_event\n  my.data$time_to_event <- pmin(my.data$time_to_event, my.data$cens)\n  my.data$id <- 1:N\n\n  # reorder columns\n  my.data <- my.data[, c(\"id\", \"time_to_event\", \"type_of_event\", \"cens\")]\n  return(my.data)\n}\n\n# compute incidence proportion\nincidenceProportion <- function(data, tau){\n\n  ae <- nrow(data[type_of_event == 1 & time_to_event <= tau]) / nrow(data)\n  ae_prob_var <- ae * (1 - ae) / nrow(data)\n\n  res <- c(\"ae_prob\" = ae, \"ae_prob_var\" = ae_prob_var)\n  return(res)\n}\n\n# compute probability transform incidence density\nprobTransIncidenceDensity <- function(data, tau){\n\n  time <- data$time_to_event\n  incidence.dens <- nrow(data[type_of_event == 1 & time_to_event <= tau]) / \n    sum(ifelse(time <= tau, time, tau))\n  ae <- 1 - exp(-incidence.dens * tau)\n\n  var_A_var <- nrow(data[type_of_event == 1 & time_to_event <= tau]) / \n    sum(ifelse(time <= tau, time, tau)) ^ 2\n  ae_var <- exp(-incidence.dens * tau) ^ 2 * var_A_var * tau ^ 2\n\n  res <- c(\"ae_prob\" = ae, \"ae_prob_var\" = ae_var)\n  return(res)\n}\n\n# compute probability transform incidence density accounting for CE\nprobTransIncidprobTransIncidenceDensityCompEvents <- function(data, CE, tau){\n  \n  data2 <- data[, type_of_event2 := ifelse(CE == 2 & data$type_of_event == 3, 0, \n                                           ifelse(CE == 3 & data$type_of_event == 3, 2, type_of_event))]\n  time2 <- ifelse(data2$time_to_event <= tau, data2$time_to_event, tau)\n  s2 <- sum(time2)\n  \n  id <- sum(dim(data2[type_of_event2 == 1 & time_to_event <= tau])[1]) / s2\n  id_ce <- sum(dim(data2[type_of_event2 == 2 & time_to_event <= tau])[1]) / s2\n  tmp <- id + id_ce\n  ett <- exp(-tau * tmp)\n\n  ae_prob <- id / tmp * (1 - exp(- tau*tmp))\n  ae_prob_var <- (((ett *      (id_ce * (1 / ett - 1) + tau * id * tmp)) / tmp ^ 2) ^ 2 * id / s2 + \n                  ((ett * id * (tau * tmp - 1 / ett + 1)) / tmp ^ 2) ^ 2 * id_ce / s2)\n\n  res <- c(\"ae_prob\" = ae_prob, \"ae_prob_var\" = ae_prob_var)\n  return(res)\n}\n\n# compute 1 - Kaplan-Meier\noneMinusKaplanMeier <- function(data, tau){\n\n  if(nrow(data[type_of_event == 1]) == 0){\n    ae_prob <- 0\n    ae_prob_var <- 0\n  }\n\n  if(nrow(data[type_of_event == 1]) > 0){\n    help <- data.frame(id = data$id)\n    help$from <- 0\n    help$to <- ifelse(data$type_of_event != 1, \"cens\", data$type_of_event)\n    help$time <-ifelse(data$time_to_event == 0, 0.001, data$time_to_event)\n\n    tra <- matrix(FALSE, 2, 2)\n    tra[1, 2] <- TRUE\n    state.names <-as.character(0:1)\n    etmmm <-etm(help, state.names, tra, \"cens\", s = 0)\n\n    ae_prob <- summary(etmmm)[[2]][sum(summary(etmmm)[[2]]$time <= tau),]$P\n    ae_prob_var <- summary(etmmm)[[2]][sum(summary(etmmm)[[2]]$time <= tau),]$var\n  }\n\n  res <- c(\"ae_prob\" = ae_prob, \"ae_prob_var\" = ae_prob_var)\n  return(res)\n}\n\n# compute Aalen-Johansen estimator\nAJE <- function(data, CE, tau){\n\n  data[, type_of_event2 := ifelse(CE == 2 & data$type_of_event == 3, 0, \n                                  ifelse(CE == 3 & data$type_of_event == 3, 2, type_of_event))]\n  time <- data$time_to_event\n  type2 <- data$type_of_event2\n  \n  # conditions\n  c1 <- nrow(data[type_of_event2 == 1])\n  c2 <- nrow(data[type_of_event2 == 2])\n  \n  if(c1 == 0){\n   ae_prob <- 0\n   ae_prob_var <- 0\n  }\n\n  if(c2 == 0){\n    ce_prob <- 0\n    ce_prob_var <- 0\n  }\n\n  # define auxiliary objects\n  help <- data.frame(id = data$id)\n  help$from <- 0\n  help$time <-ifelse(time == 0, 0.001, time)\n  tra <- matrix(FALSE, 2, 2)\n  tra[1, 2] <- TRUE\n  state.names <- as.character(0:1)\n  \n  if(c1 == 0 & c2 != 0){\n    help$to <- ifelse(type2 != 2, \"cens\", type2 - 1)\n    etmmm <- etm(help, state.names, tra, \"cens\", s = 0)\n    setmm <- summary(etmmm)[[2]]\n    ce_prob <- setmm[sum(setmm$time <= tau),]$P\n    ce_prob_var <- setmm[sum(setmm$time <= tau),]$var\n  }\n\n  if(c1 != 0 & c2 == 0){\n    help$to <- ifelse(type2 != 1, \"cens\", type2)\n    etmmm <- etm(help, state.names, tra, \"cens\", s = 0)\n    setmm <- summary(etmmm)[[2]]\n   \n    ae_prob <- setmm[sum(setmm$time <= tau),]$P\n    ae_prob_var <- setmm[sum(setmm$time <= tau),]$var\n  }\n\n  if(c1 != 0 & c2 != 0){\n    help$to <- ifelse(!(type2 %in% c(1, 2)),\"cens\", type2)\n\n    tra <- matrix(FALSE, 3, 3)\n    tra[1, 2:3] <- TRUE\n    state.names <- as.character(0:2)\n    etmmm <- etm(help, state.names, tra, \"cens\", s = 0)\n    setmm <- summary(etmmm)\n   \n    ae_prob <- setmm[[2]][sum(setmm[[2]]$time <= tau),]$P\n    ae_prob_var <- setmm[[2]][sum(setmm[[2]]$time <= tau),]$var\n\n    ce_prob <- setmm[[3]][sum(setmm[[3]]$time <= tau),]$P\n    ce_prob_var <- setmm[[3]][sum(setmm[[3]]$time <= tau),]$var\n  }\n\n  res_ae <- c(\"ae_prob\" = ae_prob, \"ae_prob_var\" = ae_prob_var)\n  res_ce <- c(\"ce_prob\" = ce_prob, \"ce_prob_var\" = ce_prob_var)\n  \n  res <- rbind(res_ae, res_ce)\n  return(res)\n}"
  },
  {
    "objectID": "events.html",
    "href": "events.html",
    "title": "Events and talks",
    "section": "",
    "text": "Contact\nReach out to Kaspar Rufibach with comments and suggestions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SAVVY: Survival analysis for AdVerse events with VarYing follow-up times",
    "section": "",
    "text": "Contact\nReach out to Kaspar Rufibach with comments and suggestions."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Contact\nReach out to Kaspar Rufibach with comments and suggestions."
  }
]